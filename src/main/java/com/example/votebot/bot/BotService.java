package com.example.votebot.bot;

import com.example.votebot.model.*;
import com.example.votebot.repository.*;
import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.User;
import com.pengrad.telegrambot.model.request.ParseMode;
import com.pengrad.telegrambot.model.request.ReplyKeyboardMarkup;
import com.pengrad.telegrambot.request.SendMessage;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.MDC;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.time.OffsetDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Service
@Slf4j
@RequiredArgsConstructor
public class BotService {

    /* ---------- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---------- */
    private static final String ADMIN_USERNAME = "minik9I";
    private static final List<String> VOTE_LABELS = List.of("–î–∞", "–ù–µ—Ç", "–í–æ–∑–¥–µ—Ä–∂—É—Å—å");
    private static final String ADD_BTN = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞";

    /* ---------- –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ---------- */
    private final BotConfig            config;
    private final UserRepository       userRepo;
    private final CandidateRepository  candRepo;
    private final VoteOptionRepository optRepo;
    private final VoteRepository       voteRepo;

    /* ---------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---------- */
    /** –∫—Ç–æ –∑–∞ –∫–∞–∫–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≥–æ–ª–æ—Å—É–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å */
    private final Map<Long, Integer> currentCand = new ConcurrentHashMap<>();

    private TelegramBot bot;

    /* ---------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------- */
    @PostConstruct
    public void init() {
        bot = new TelegramBot(config.telegramToken());
        log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

        bot.setUpdatesListener(updates -> {
            for (Update upd : updates) {
                try {
                    if (upd.message() != null && upd.message().text() != null) {
                        handleText(upd);
                    }
                } catch (Exception ex) {
                    log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update", ex);
                }
            }
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }

    @PreDestroy
    public void shutdown() {
        if (bot != null) bot.removeGetUpdatesListener();
    }

    /* ===================================================================== */
    /* ================== –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===================== */
    private void handleText(Update upd) {
        String txt   = upd.message().text().trim();
        User   from  = upd.message().from();
        Long   uid   = from.id();
        Long   chat  = upd.message().chat().id();

        MDC.put("tgChatId", String.valueOf(chat));
        MDC.put("userId",   String.valueOf(uid));

        /* -------- /start -------- */
        if ("/start".equalsIgnoreCase(txt)) {
            registerUser(from);
            bot.execute(new SendMessage(chat,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + from.firstName() + "!"));
            sendNextCandidate(uid, chat, from.username());
            return;
        }

        /* -------- /add <–∏–º—è> (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) -------- */
        if (txt.startsWith("/add ") && ADMIN_USERNAME.equals(from.username())) {
            String name = txt.substring(5).trim();
            if (name.isEmpty()) {
                bot.execute(new SendMessage(chat, "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ /add"));
                return;
            }
            candRepo.save(new Candidate(null, name, null));
            bot.execute(new SendMessage(chat, "–ö–∞–Ω–¥–∏–¥–∞—Ç ¬´" + name + "¬ª –¥–æ–±–∞–≤–ª–µ–Ω."));
            return;
        }

        /* -------- –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Äú–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞‚Äù (–∞–¥–º–∏–Ω) -------- */
        if (ADD_BTN.equals(txt) && ADMIN_USERNAME.equals(from.username())) {
            bot.execute(new SendMessage(chat, "–ü—Ä–∏—à–ª–∏—Ç–µ /add <–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞>"));
            return;
        }

        /* -------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ -------- */
        if (VOTE_LABELS.contains(txt)) {
            Integer candId = currentCand.get(uid);
            if (candId == null) {
                bot.execute(new SendMessage(chat, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start"));
                return;
            }
            saveVote(uid, candId, txt, chat);
            sendNextCandidate(uid, chat, from.username());
            return;
        }

        /* -------- –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ -------- */
        bot.execute(new SendMessage(chat,
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /add (–¥–ª—è –∞–¥–º–∏–Ω–∞)."));
    }

    /* ===================================================================== */
    /* ========================== —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ ======================== */
    private void saveVote(Long uid, Integer candId, String label, Long chat) {
        String code = switch (label) {
            case "–î–∞"          -> "Y";
            case "–ù–µ—Ç"         -> "N";
            default            -> "A";
        };

        Vote v = new Vote(new VoteId(uid, candId),
            userRepo.getReferenceById(uid),
            candRepo.getReferenceById(candId),
            optRepo.getReferenceById(code),
            OffsetDateTime.now());
        try {
            voteRepo.save(v);
            bot.execute(new SendMessage(chat, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω üëç"));
        } catch (DataIntegrityViolationException e) {
            bot.execute(new SendMessage(chat, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."));
        }
    }

    /* ===================================================================== */
    /* ============= –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ + reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É =============== */
    private void sendNextCandidate(Long uid, Long chat, String username) {

        Candidate cand = candRepo
            .findUnvoted(uid, PageRequest.of(0, 1))
            .stream().findFirst().orElse(null);

        if (cand == null) {
            currentCand.remove(uid);
            bot.execute(new SendMessage(chat,
                "–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –°–ø–∞—Å–∏–±–æ!"));
            return;
        }
        currentCand.put(uid, cand.getId());

        /* —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É */
        List<String[]> rows = new ArrayList<>();
        rows.add(new String[]{"–î–∞", "–ù–µ—Ç", "–í–æ–∑–¥–µ—Ä–∂—É—Å—å"});
        if (ADMIN_USERNAME.equals(username)) {
            rows.add(new String[]{ADD_BTN});
        }
        ReplyKeyboardMarkup kb = new ReplyKeyboardMarkup(rows.toArray(String[][]::new))
            .resizeKeyboard(true)
            .oneTimeKeyboard(false);

        bot.execute(new SendMessage(chat,
            "–µ–¥–µ—Ç –ª–∏: *" + cand.getName() + "*")
            .parseMode(ParseMode.Markdown)
            .replyMarkup(kb));
    }

    /* ===================================================================== */
    /* ==================== —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======================= */
    private void registerUser(User tgUser) {
        TelegramUser u = userRepo.findById(tgUser.id()).orElseGet(TelegramUser::new);
        u.setTelegramId(tgUser.id());
        u.setUsername(tgUser.username());
        userRepo.save(u);
    }
}
